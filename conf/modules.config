/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.rep}_raw" }
        publishDir = [
            path: { "${params.outdir}/fastqc/raw" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: FASTP_PAIRED {
        ext.args   = [
            // collapsing options - option to retain singletons
            params.shortread_qc_includeunmerged ? '--include_unmerged' : '',
            // trimming options
            params.shortread_qc_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter1 ? "--adapter_sequence ${params.shortread_qc_adapter1}" : "",
            params.shortread_qc_adapterlist ? "" : params.shortread_qc_adapter2 ? "--adapter_sequence_r2 ${params.shortread_qc_adapter2}" : "--detect_adapter_for_pe",
            // filtering options
            "--length_required ${params.shortread_qc_minlength}",
            params.perform_shortread_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.shortread_complexityfilter_fastp_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ]
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/bowtie2/build" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2',
            enabled: params.save_hostremoval_index
        ]
    }

    // Saving unmapped reads as FQ comes via input channel!
    withName: BOWTIE2_ALIGN {
        ext.args   = [
            params.shortread_hostremoval_very_sensitive ? '--very-sensitive' : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ],
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                enabled: params.save_hostremoval_bam
            ],
            [
                path: { "${params.outdir}/bowtie2/align" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_hostremoval_unmapped
            ]
        ]
    }

    withName: SAMTOOLS_STATS {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: params.publish_dir_mode,
            pattern: '*stats'
        ]
    }

    withName: FASTQC_PROCESSED {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.rep}_processed" }
        publishDir = [
            path: { "${params.outdir}/fastqc/processed" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,zip}'
        ]
    }

    withName: SOURMASH_SKETCH_READS {
        ext.args   = [
            "dna --param-string 'scaled=1000,k=21,abund'",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/sourmash/sketch" },
            mode: params.publish_dir_mode,
            pattern: '*.sig'
        ]
    }

    withName: SOURMASH_SKETCH_PHAGE {
        ext.args   = [
            "dna --param-string 'scaled=1000,k=21' --singleton",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/sourmash/sketch" },
            mode: params.publish_dir_mode,
            pattern: '*.sig'
        ]
    }

    withName: SOURMASH_GATHER_BACTERIA {
        ext.args   = [
            params.containment_min_overlap_bacteria ? "--threshold-bp $params.containment_min_overlap_bacteria" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}_bacteria" }
        publishDir = [
            path: { "${params.outdir}/sourmash/gather" },
            mode: params.publish_dir_mode,
            pattern: '*.csv.gz'
        ]
    }

    withName: SOURMASH_GATHER_PHAGE {
        ext.args   = [
            params.containment_min_overlap_phage ? "--threshold-bp $params.containment_min_overlap_phage" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}_phage" }
        publishDir = [
            path: { "${params.outdir}/sourmash/gather" },
            mode: params.publish_dir_mode,
            pattern: '*.csv.gz'
        ]
    }

    withName: FILTER_ASSEMBLY_SUMMARY {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/filter_assembly_summary" },
            mode: params.publish_dir_mode,
            pattern: '*_filtered_assembly_summary.txt'
        ]
    }

    withName: GENOME_UPDATER {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/genome_updater" },
            mode: params.publish_dir_mode,
            pattern: 'bacterial_genomes'
        ]
    }

    withName: EXTRACT_CONTAINED_PHAGE {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/extract_contained_phage" },
            mode: params.publish_dir_mode,
            pattern: '*.phage_genomes.fna.gz'
        ]
    }

    withName: COVERM_CONTIG {
        ext.args   = [
            params.alignment_min_read_length ? "--min-read-aligned-length $params.alignment_min_read_length" : '',
            params.alignment_min_identity ? "--min-read-percent-identity $params.alignment_min_identity" : '',
            params.alignment_min_percent_aligned ? "--min-read-aligned-percent $params.alignment_min_percent_aligned" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/coverm/contig" },
            mode: params.publish_dir_mode,
            pattern: '*_phage_alignment_results.tsv'
        ]
    }

    withName: COVERM_GENOME {
        stageInMode = 'copy'
        ext.args   = [
            params.alignment_min_read_length ? "--min-read-aligned-length $params.alignment_min_read_length" : '',
            params.alignment_min_identity ? "--min-read-percent-identity $params.alignment_min_identity" : '',
            params.alignment_min_percent_aligned ? "--min-read-aligned-percent $params.alignment_min_percent_aligned" : '',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/coverm/genome" },
            mode: params.publish_dir_mode,
            pattern: '*_bacteria_alignment_results.tsv'
        ]
    }

    withName: EXTRACT_ALIGNED_PHAGE {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/extract_aligned_phage" },
            mode: params.publish_dir_mode,
            pattern: '*.aligned.fna.gz'
        ]
    }

    withName: EXTRACT_ALIGNED_BACTERIA {
        ext.prefix = { "${meta.id}_${meta.rep}" }
        publishDir = [
            path: { "${params.outdir}/extract_aligned_bacteria" },
            mode: params.publish_dir_mode,
            pattern: '*_aligned_bacteria_genomes/*fna.gz'
        ]
    }

    withName: DREP_DEREPLICATE {
        stageInMode = 'copy'
        ext.args   = [
            params.bacteria_dereplication_min_ani ? "--S_ani $params.bacteria_dereplication_min_ani" : '',
            params.bacteria_dereplication_min_cov ? "--cov_thresh $params.bacteria_dereplication_min_cov" : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/drep/dereplicate" },
            mode: params.publish_dir_mode,
            pattern: 'dereplicated_genomes/*.fna.gz'
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
